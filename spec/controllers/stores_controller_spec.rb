# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe StoresController, type: :controller do
  describe "GET #index" do
    let(:stores) { [create(:store)] }

    it "returns all pages" do
      get :index

      expect(response).to render_template("index")
      expect(response).to have_http_status(:ok)
      expect(assigns(:stores)).to eq(Store.all)
    end
  end

  describe "GET #show" do
    let(:store) { create(:store) }

    it "returns stores" do
      get :show, params: { id: store.id }

      expect(response).to render_template("show")
      expect(response).to have_http_status(:ok)
      expect(assigns(:store)).to eq(store)
    end
  end

  describe "GET #new" do
    it "returns render form for creating new stores" do
      get :new

      expect(response).to render_template("new")
      expect(response).to have_http_status(:success)
    end
  end

  describe "POST #create" do
    let(:store_params) { attributes_for(:store) }

    it "creates new stores" do
      post :create, params: { store: store_params }

      store = Store.find_by(store_params)
      expect(response).to redirect_to(store_path(store))
      expect(response).to have_http_status(:found)
    end

    it "does not create new stores" do
      post :create, params: { store: { name: "a" } }

      expect(response).to render_template("new")
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end

  describe "GET #edit" do
    let(:store) { create(:store) }

    it "returns render form for editing stores" do
      get :edit, params: { id: store.id }

      expect(response).to render_template("edit")
      expect(response).to have_http_status(:success)
    end
  end

  describe "PUT #update" do
    let(:store) { create(:store) }

    it "updates stores" do
      put :update, params: { id: store.id, store: { name: "New name" } }

      expect(response).to redirect_to(store_path(store))
      expect(response).to have_http_status(:found)
    end

    it "does not update stores" do
      put :update, params: { id: store.id, store: { name: nil } }

      expect(response).to render_template("edit")
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end

  describe "DELETE #destroy" do
    let(:store) { create(:store) }

    it "destroys stores" do
      delete :destroy, params: { id: store.id }

      expect(response).to redirect_to(stores_path)
      expect(response).to have_http_status(:found)
    end
  end
end
